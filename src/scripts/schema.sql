

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;


COMMENT ON SCHEMA "public" IS 'standard public schema';



CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";






CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";






CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";





SET default_tablespace = '';

SET default_table_access_method = "heap";


CREATE TABLE IF NOT EXISTS "public"."emoji" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "name" "text",
    "shortcode" "text",
    "unicode" "text",
    "utf8" "text"
);


ALTER TABLE "public"."emoji" OWNER TO "postgres";


ALTER TABLE "public"."emoji" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."emoji_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."journal_content" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "text" "text",
    "title" "text"
);


ALTER TABLE "public"."journal_content" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."journal_entry" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "user_id" "text",
    "journal_content_id" bigint,
    "journal_prompt_id" bigint,
    "emoji_id" bigint
);


ALTER TABLE "public"."journal_entry" OWNER TO "postgres";


ALTER TABLE "public"."journal_entry" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."journal_entry_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."journal_prompt" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "prompt" "text",
    "prompt_category" bigint
);


ALTER TABLE "public"."journal_prompt" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."journal_prompt_category" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "name" "text"
);


ALTER TABLE "public"."journal_prompt_category" OWNER TO "postgres";


ALTER TABLE "public"."journal_prompt_category" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."journal_prompt_category_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



ALTER TABLE "public"."journal_prompt" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."journal_prompt_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



ALTER TABLE "public"."journal_content" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."journal_text_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."test_table" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "column_one" "text"
);


ALTER TABLE "public"."test_table" OWNER TO "postgres";


ALTER TABLE "public"."test_table" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."test_table_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."user_info" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "user_id" "text",
    "email" "text",
    "first_name" "text",
    "last_name" "text",
    "date_of_birth" "text",
    "country" "text",
    "journalling_goal" "text"
);


ALTER TABLE "public"."user_info" OWNER TO "postgres";


ALTER TABLE "public"."user_info" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."user_info_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



ALTER TABLE ONLY "public"."emoji"
    ADD CONSTRAINT "emoji_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."journal_entry"
    ADD CONSTRAINT "journal_entry_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."journal_prompt_category"
    ADD CONSTRAINT "journal_prompt_category_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."journal_prompt"
    ADD CONSTRAINT "journal_prompt_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."journal_content"
    ADD CONSTRAINT "journal_text_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."test_table"
    ADD CONSTRAINT "test_table_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."user_info"
    ADD CONSTRAINT "user_info_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."journal_entry"
    ADD CONSTRAINT "journal_entry_emoji_id_fkey" FOREIGN KEY ("emoji_id") REFERENCES "public"."emoji"("id") ON DELETE SET NULL;



ALTER TABLE ONLY "public"."journal_entry"
    ADD CONSTRAINT "journal_entry_journal_content_id_fkey" FOREIGN KEY ("journal_content_id") REFERENCES "public"."journal_content"("id") ON DELETE SET NULL;



ALTER TABLE ONLY "public"."journal_entry"
    ADD CONSTRAINT "journal_entry_journal_prompt_id_fkey" FOREIGN KEY ("journal_prompt_id") REFERENCES "public"."journal_prompt"("id") ON DELETE SET NULL;



ALTER TABLE ONLY "public"."journal_prompt"
    ADD CONSTRAINT "journal_prompt_prompt_category_fkey" FOREIGN KEY ("prompt_category") REFERENCES "public"."journal_prompt_category"("id") ON DELETE SET NULL;



CREATE POLICY "Enable insert for authenticated users only" ON "public"."test_table" FOR INSERT TO "authenticated" WITH CHECK (true);



CREATE POLICY "Enable read access for all users" ON "public"."emoji" FOR SELECT USING (true);



CREATE POLICY "Enable read access for all users" ON "public"."journal_content" FOR SELECT USING (true);



CREATE POLICY "Enable read access for all users" ON "public"."journal_entry" FOR SELECT USING (true);



CREATE POLICY "Enable read access for all users" ON "public"."journal_prompt" FOR SELECT USING (true);



CREATE POLICY "Enable read access for all users" ON "public"."journal_prompt_category" FOR SELECT USING (true);



CREATE POLICY "Enable read access for all users" ON "public"."test_table" FOR SELECT USING (true);



CREATE POLICY "Enable read access for all users" ON "public"."user_info" FOR SELECT USING (true);



CREATE POLICY "Enable update for all users" ON "public"."test_table" FOR UPDATE USING (true);



ALTER TABLE "public"."emoji" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."journal_content" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."journal_entry" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."journal_prompt" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."journal_prompt_category" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."test_table" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."user_info" ENABLE ROW LEVEL SECURITY;




ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";


GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";








































































































































































GRANT ALL ON TABLE "public"."emoji" TO "anon";
GRANT ALL ON TABLE "public"."emoji" TO "authenticated";
GRANT ALL ON TABLE "public"."emoji" TO "service_role";



GRANT ALL ON SEQUENCE "public"."emoji_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."emoji_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."emoji_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."journal_content" TO "anon";
GRANT ALL ON TABLE "public"."journal_content" TO "authenticated";
GRANT ALL ON TABLE "public"."journal_content" TO "service_role";



GRANT ALL ON TABLE "public"."journal_entry" TO "anon";
GRANT ALL ON TABLE "public"."journal_entry" TO "authenticated";
GRANT ALL ON TABLE "public"."journal_entry" TO "service_role";



GRANT ALL ON SEQUENCE "public"."journal_entry_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."journal_entry_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."journal_entry_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."journal_prompt" TO "anon";
GRANT ALL ON TABLE "public"."journal_prompt" TO "authenticated";
GRANT ALL ON TABLE "public"."journal_prompt" TO "service_role";



GRANT ALL ON TABLE "public"."journal_prompt_category" TO "anon";
GRANT ALL ON TABLE "public"."journal_prompt_category" TO "authenticated";
GRANT ALL ON TABLE "public"."journal_prompt_category" TO "service_role";



GRANT ALL ON SEQUENCE "public"."journal_prompt_category_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."journal_prompt_category_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."journal_prompt_category_id_seq" TO "service_role";



GRANT ALL ON SEQUENCE "public"."journal_prompt_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."journal_prompt_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."journal_prompt_id_seq" TO "service_role";



GRANT ALL ON SEQUENCE "public"."journal_text_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."journal_text_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."journal_text_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."test_table" TO "anon";
GRANT ALL ON TABLE "public"."test_table" TO "authenticated";
GRANT ALL ON TABLE "public"."test_table" TO "service_role";



GRANT ALL ON SEQUENCE "public"."test_table_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."test_table_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."test_table_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."user_info" TO "anon";
GRANT ALL ON TABLE "public"."user_info" TO "authenticated";
GRANT ALL ON TABLE "public"."user_info" TO "service_role";



GRANT ALL ON SEQUENCE "public"."user_info_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."user_info_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."user_info_id_seq" TO "service_role";









ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES TO "service_role";






























RESET ALL;
